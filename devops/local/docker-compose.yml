version: '3.8'
services:
  product-database:
    container_name: product-database
    image: postgres:14.1-alpine
    env_file: ./.env
    networks:
      - microservice
    ports:
      - $PRODUCT_DATABASE_SERVER_PORT:$PRODUCT_DATABASE_DOCKER_PORT
    environment:
      - POSTGRES_USER=$PRODUCT_DATABASE_USER
      - POSTGRES_DB=$PRODUCT_DATABASE_NAME
      - POSTGRES_PASSWORD=$PRODUCT_DATABASE_PASS

  order-database:
    container_name: order-database
    image: postgres:14.1-alpine
    env_file: ./.env
    networks:
      - microservice
    ports:
      - $ORDER_DATABASE_SERVER_PORT:$ORDER_DATABASE_DOCKER_PORT
    environment:
      - POSTGRES_USER=$ORDER_DATABASE_USER
      - POSTGRES_DB=$ORDER_DATABASE_NAME
      - POSTGRES_PASSWORD=$ORDER_DATABASE_PASS

  payment-database:
    container_name: payment-database
    image: postgres:14.1-alpine
    env_file: ./.env
    networks:
      - microservice
    ports:
      - $PAYMENT_DATABASE_SERVER_PORT:$PAYMENT_DATABASE_DOCKER_PORT
    environment:
      - POSTGRES_USER=$PAYMENT_DATABASE_USER
      - POSTGRES_DB=$PAYMENT_DATABASE_NAME
      - POSTGRES_PASSWORD=$PAYMENT_DATABASE_PASS

  user-database:
    container_name: user-database
    image: postgres:14.1-alpine
    env_file: ./.env
    networks:
      - microservice
    ports:
      - $USER_DATABASE_SERVER_PORT:$USER_DATABASE_DOCKER_PORT
    environment:
      - POSTGRES_USER=$USER_DATABASE_USER
      - POSTGRES_DB=$USER_DATABASE_NAME
      - POSTGRES_PASSWORD=$USER_DATABASE_PASS

#  security-database:
#    image: mysql:5.7
#    container_name: security-database
#    networks:
#      - microservice
#    env_file: ./.env
#    environment:
#      - MYSQL_ROOT_PASSWORD=$SECURITY_DATABASE_PASS
#      - MYSQL_DATABASE=$SECURITY_DATABASE_NAME
#    ports:
#      - $SECURITY_DATABASE_SERVER_PORT:$SECURITY_DATABASE_DOCKER_PORT

  axon-server:
    container_name: axon-server
    image: axoniq/axonserver:latest-dev
    hostname: axon-server
    env_file: ./.env
    volumes:
      - axonserver-data:/axonserver/data
      - axonserver-events:/axonserver/events
      - axonserver-config:/axonserver/config:ro
    ports:
      - $AXON_UI_SERVER_PORT:$AXON_UI_DOCKER_PORT
      - $AXON_GRPC_SERVER_PORT:$AXON_GRPC_DOCKER_PORT
    networks:
      - microservice

  eureka-master:
    container_name: eureka-master
    hostname: eureka-master
    image: liem18112000/euraka-discovery-server:1.0
    ports:
      - "8761:8761"
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - ACTIVE_PROFILE=default

#  rabbitmq:
#    container_name: rabbitmq
#    image: rabbitmq:3.9-management-alpine
#    environment:
#      - RABBITMQ_DEFAULT_USER=$RABBITMQ_DEFAULT_USER
#      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_DEFAULT_PASS
#    ports:
#      - $RABBIT_PROTOCOL_SERVICE_PORT:$RABBIT_PROTOCOL_DOCKER_PORT
#      - $RABBIT_UI_MANAGEMENT_SERVICE_PORT:$RABBIT_UI_MANAGEMENT_DOCKER_PORT

#  redis:
#    container_name: redis
#    image: redis:6.2-alpine
#    restart: always
#    ports:
#      - $REDIS_SERVER_PORT:$REDIS_DOCKER_PORT
#    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  spring-gateway-service:
    container_name: spring-gateway-service
    image: liem18112000/spring-gateway-service:1.2
    depends_on:
      - eureka-master
    ports:
      - $GATEWAY_SERVICE_SERVER_PORT:$GATEWAY_SERVICE_DOCKER_PORT
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - SERVER_PORT=$GATEWAY_SERVICE_DOCKER_PORT
      - ACTIVE_PROFILES=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  axon-product-service:
    container_name: axon-product-service
    image: liem18112000/axon-product-service:1.2
    depends_on:
      - product-database
      - axon-server
      - eureka-master
    ports:
      - $PRODUCT_SERVICE_SERVER_PORT:$PRODUCT_SERVICE_DOCKER_PORT
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - SERVER_PORT=$PRODUCT_SERVICE_DOCKER_PORT
      - DATABASE_HOST=$PRODUCT_DATABASE_HOST
      - DATABASE_PORT=$PRODUCT_DATABASE_DOCKER_PORT
      - DATABASE_PASS=$PRODUCT_DATABASE_PASS
      - DATABASE_USER=$PRODUCT_DATABASE_USER
      - AXON_SERVER_HOST=$AXON_SERVER_HOST
      - AXON_SERVER_PORT=$AXON_GRPC_DOCKER_PORT
      - ACTIVE_PROFILES=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  axon-order-service:
    container_name: axon-order-service
    image: liem18112000/axon-order-service:1.2
    depends_on:
      - order-database
      - axon-server
      - eureka-master
    ports:
      - $ORDER_SERVICE_SERVER_PORT:$ORDER_SERVICE_DOCKER_PORT
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - SERVER_PORT=$ORDER_SERVICE_DOCKER_PORT
      - DATABASE_HOST=$ORDER_DATABASE_HOST
      - DATABASE_PORT=$ORDER_DATABASE_DOCKER_PORT
      - DATABASE_PASS=$ORDER_DATABASE_PASS
      - DATABASE_USER=$ORDER_DATABASE_USER
      - AXON_SERVER_HOST=$AXON_SERVER_HOST
      - AXON_SERVER_PORT=$AXON_GRPC_DOCKER_PORT
      - ACTIVE_PROFILES=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  axon-payment-service:
    container_name: axon-payment-service
    image: liem18112000/axon-payment-service:1.2
    depends_on:
      - payment-database
      - axon-server
      - eureka-master
    ports:
      - $PAYMENT_SERVICE_SERVER_PORT:$PAYMENT_SERVICE_DOCKER_PORT
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - SERVER_PORT=$PAYMENT_SERVICE_DOCKER_PORT
      - DATABASE_HOST=$PAYMENT_DATABASE_HOST
      - DATABASE_PORT=$PAYMENT_DATABASE_DOCKER_PORT
      - DATABASE_PASS=$PAYMENT_DATABASE_PASS
      - DATABASE_USER=$PAYMENT_DATABASE_USER
      - AXON_SERVER_HOST=$AXON_SERVER_HOST
      - AXON_SERVER_PORT=$AXON_GRPC_DOCKER_PORT
      - ACTIVE_PROFILES=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  axon-user-service:
    container_name: axon-user-service
    image: liem18112000/axon-user-service:1.2
    depends_on:
      - user-database
      - axon-server
      - eureka-master
    ports:
      - $USER_SERVICE_SERVER_PORT:$USER_SERVICE_DOCKER_PORT
    networks:
      - microservice
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-master:8761/eureka
      - SERVER_PORT=$USER_SERVICE_DOCKER_PORT
      - DATABASE_HOST=$USER_DATABASE_HOST
      - DATABASE_PORT=$USER_DATABASE_DOCKER_PORT
      - DATABASE_PASS=$USER_DATABASE_PASS
      - DATABASE_USER=$USER_DATABASE_USER
      - AXON_SERVER_HOST=$AXON_SERVER_HOST
      - AXON_SERVER_PORT=$AXON_GRPC_DOCKER_PORT
      - ACTIVE_PROFILES=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    networks:
      - microservice
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.2.0
    networks:
      - microservice
    ports:
      - "25826:25826"
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    restart: on-failure
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.2.0
    networks:
      - microservice
    ports:
      - "5601:5601"
    restart: on-failure
    depends_on:
      - elasticsearch

  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:7.2.0
    networks:
      - microservice
    volumes:
      - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
      - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
    user: root                                                             # Allow access to log files and docker.sock
    restart: on-failure
    depends_on:
      - logstash
networks:
  microservice:
    driver: bridge
volumes:
  axonserver-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/data
  axonserver-events:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/events
  axonserver-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/axon-server-se/config